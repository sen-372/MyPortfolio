/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useFrame, useThree, useLoader } from "@react-three/fiber";
import { PLYLoader } from "three/examples/jsm/loaders/PLYLoader";
import { OrbitControls } from "@react-three/drei";
import * as THREE from "three";
import { vertexShader } from "../assets/effects/vertexShader";
import { fragmentShader } from "../assets/effects/fragmentShader";

import spaceScene from "../assets/3d/wglow.ply";

export function Space({
  isRotating,
  setIsRotating,
  setCurrentStage,
  ...props
}) {
  const spaceRef = useRef();

  const { gl, viewport } = useThree();
  const geometry = useLoader(PLYLoader, spaceScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    lastX.current = clientX;
  };

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;

      spaceRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);
      spaceRef.current.rotation.y += 0.01 * Math.PI;
      rotationSpeed.current = 0.0125;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);
      spaceRef.current.rotation.y -= 0.01 * Math.PI;
      rotationSpeed.current = 0.0125;
    }
  };

  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      spaceRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = spaceRef.current.rotation.y;

      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      switch (true) {
        case normalizedRotation >= 0.1 && normalizedRotation <= 0.9:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 4.5 && normalizedRotation <= 5.4:
          setCurrentStage(1);
          break;
        case normalizedRotation >= 3.0 && normalizedRotation <= 3.9:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 1.5 && normalizedRotation <= 2.4:
          setCurrentStage(3);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);

    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);

      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  const shaderMaterial = new THREE.ShaderMaterial({
    vertexShader,
    fragmentShader,
    vertexColors: true,
  });

  return (
    <group ref={spaceRef} {...props}>
      <points
        geometry={geometry}
        material={shaderMaterial} // Emission Material 적용
        scale={[0.5, 0.5, 0.5]}
      />
      <OrbitControls />
    </group>
  );
}

export default Space;
